<?php

namespace Nfq\NomNomBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * MyUserProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MyUserProductRepository extends EntityRepository
{
    public function findByUserEventAndRecipeProduct($userEventId, $recipeProductId)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT m FROM NfqNomNomBundle:MyUserProduct m WHERE
            m.myUserEvent = :userEvent AND m.myRecipeProduct = :recipeProduct')
            ->setParameters(array('userEvent' => $userEventId,
                'recipeProduct' => $recipeProductId))
            ->getResult();
    }

    public function findByEvent($event)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT m FROM NfqNomNomBundle:MyUserProduct AS m JOIN m.myUserEvent AS ue
            WHERE ue.myEvent = :event ')
            ->setParameters(array('event' => $event))
            ->getResult();
    }

    public function findByEventAndRecipeProduct($event, $recipeProduct)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT m FROM NfqNomNomBundle:MyUserProduct AS m JOIN m.myUserEvent AS ue
            WHERE ue.myEvent = :event AND m.myRecipeProduct = :recipeProduct')
            ->setParameters(array('event' => $event,
                'recipeProduct' => $recipeProduct))
            ->getResult();
    }

    public function findByUserEvent($userEventId)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT m FROM NfqNomNomBundle:MyUserProduct m WHERE
            m.myUserEvent = :userEvent')
            ->setParameter('userEvent', $userEventId)
            ->getResult();
    }

    public function getOtherUsersProductQuantity($myUserEventId, $myRecipeProductId)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            'SELECT sum(mup.quantity)
            FROM NfqNomNomBundle:MyUserProduct mup
            WHERE mup.myUserEvent != :my_user_event_id AND mup.myRecipeProduct = :my_recipe_product_id
            '
        )
            ->setParameter('my_user_event_id', $myUserEventId)
            ->setParameter('my_recipe_product_id', $myRecipeProductId);

        $quantity = $query->getSingleScalarResult();
        if($quantity == null) {
            $quantity = 0;
        }

        return (int)$quantity;
    }
}
