<?php

namespace Nfq\NomNomBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * MyUserEventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MyUserEventRepository extends EntityRepository
{
    public function findByEventAndUser($eventId, $userId)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT m FROM NfqNomNomBundle:MyUserEvent m
            WHERE m.myEvent = :myevent AND m.myUser = :myuser')
            ->setParameters(array('myevent' => $eventId,
                'myuser' => $userId))
            ->getResult();
    }

    public function findByEvent($eventId)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT m FROM NfqNomNomBundle:MyUserEvent m
            WHERE m.myEvent = :myevent')
            ->setParameters(array('myevent' => $eventId))
            ->getResult();
    }

    public function findByEventHost($eventId)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT m FROM NfqNomNomBundle:MyUserEvent m
            WHERE m.myEvent = :myevent AND m.invitationStatus = '. MyUserEvent::INVITATION_STATUS_CREATOR)
            ->setParameter('myevent', $eventId)
            ->getResult();
    }

    public function findByEventInvited($eventId)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT m FROM NfqNomNomBundle:MyUserEvent m
            WHERE m.myEvent = :myevent AND m.invitationStatus = '. MyUserEvent::INVITATION_STATUS_PENDING)
            ->setParameter('myevent', $eventId)
            ->getResult();
    }

    public function findByEventAccepted($eventId)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT m FROM NfqNomNomBundle:MyUserEvent m
            WHERE m.myEvent = :myevent AND m.invitationStatus = '. MyUserEvent::INVITATION_STATUS_ACCEPTED)
            ->setParameter('myevent', $eventId)
            ->getResult();
    }

    public function findByUserHost($userId)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT m FROM NfqNomNomBundle:MyUserEvent m
            WHERE m.myUser = :myuser AND m.invitationStatus = '. MyUserEvent::INVITATION_STATUS_CREATOR)
            ->setParameter('myuser', $userId)
            ->getResult();
    }

    public function findByUserInvited($userId)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT m FROM NfqNomNomBundle:MyUserEvent m
            WHERE m.myUser = :myuser AND m.invitationStatus = '. MyUserEvent::INVITATION_STATUS_PENDING)
            ->setParameter('myuser', $userId)
            ->getResult();
    }

    public function findByUserAccepted($userId)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT m FROM NfqNomNomBundle:MyUserEvent m
            WHERE m.myUser = :myuser AND m.invitationStatus = '. MyUserEvent::INVITATION_STATUS_ACCEPTED)
            ->setParameter('myuser', $userId)
            ->getResult();
    }

    public function getReadyPercentagePhaseTwo($eventId)
    {
        //we will count only accepted users
        $ready = $this->getEntityManager()
            ->createQuery('SELECT COUNT(m.readyToPhaseTwo) FROM NfqNomNomBundle:MyUserEvent m
            WHERE m.myEvent = :myevent AND m.readyToPhaseTwo = ' . MyEvent::PHASE_VOTE .
            ' AND m.invitationStatus = '. MyUserEvent::INVITATION_STATUS_ACCEPTED)
            ->setParameter('myevent', $eventId)
            ->getScalarResult()['0']['1'];

        $all = $this->getEntityManager()
            ->createQuery('SELECT COUNT(m.readyToPhaseTwo) FROM NfqNomNomBundle:MyUserEvent m
            WHERE m.myEvent = :myevent AND m.invitationStatus = '. MyUserEvent::INVITATION_STATUS_ACCEPTED)
            ->setParameter('myevent', $eventId)
            ->getScalarResult()['0']['1'];

        return array('ready' => $ready,
            'all' => $all);
    }

    public function getReadyPercentagePhaseThree($eventId)
    {
        //we will count only accepted users
        $ready = $this->getEntityManager()
            ->createQuery('SELECT COUNT(m.readyToPhaseThree) FROM NfqNomNomBundle:MyUserEvent m
            WHERE m.myEvent = :myevent AND m.readyToPhaseThree = ' . MyEvent::PHASE_VOTE .
            'AND m.invitationStatus = '. MyUserEvent::INVITATION_STATUS_ACCEPTED)
            ->setParameter('myevent', $eventId)
            ->getScalarResult()['0']['1'];

        $all = $this->getEntityManager()
            ->createQuery('SELECT COUNT(m.readyToPhaseThree) FROM NfqNomNomBundle:MyUserEvent m
            WHERE m.myEvent = :myevent AND m.invitationStatus = '. MyUserEvent::INVITATION_STATUS_ACCEPTED)
            ->setParameter('myevent', $eventId)
            ->getScalarResult()['0']['1'];

        return array('ready' => $ready,
            'all' => $all);
    }

    public function findUsersByEvent($eventId)
    {
        $usersEvents = $this->getEntityManager()
            ->createQuery('
              SELECT ue
              FROM NfqNomNomBundle:MyUserEvent ue
              WHERE ue.myEvent = :myevent ')
            ->setParameter('myevent', $eventId)
            ->getResult()
        ;

        $users = array();
        foreach($usersEvents as $userEvent) {
            $users[] = $userEvent->getMyUser()->getId();
        }

        return $users;
    }

    /**
     * @param $eventId
     * @param null $excludeUserId
     * @return array
     */
    public function getUserEventIdsByEvent($eventId, $excludeUserId = null)
    {

        $myUserEvents =  $this->getEntityManager()
            ->createQuery('
                SELECT mue
                FROM NfqNomNomBundle:MyUserEvent mue
                WHERE
                  mue.myEvent = :myEvent
                  '.($excludeUserId ? ' AND mue.myUser != :myUserId ' : '').'
            ')
        ->setParameter('myEvent', $eventId);

        if($excludeUserId) {
            $myUserEvents->setParameter('myUserId', $excludeUserId);
        }

        $myUserEvents = $myUserEvents->getResult();

        $myUserEventIds = array();

        foreach($myUserEvents as $myUserEvent) {
            $myUserEventIds[] = $myUserEvent->getId();
        }

        return $myUserEventIds;
    }
}
